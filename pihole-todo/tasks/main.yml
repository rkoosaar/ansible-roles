---
# - name: Ensure a list of packages are installed
#   dnf:
#     name: "{{ add_rpm_pkgs }}"
#     state: present

# - import_tasks: debian.yml
#   when: 
#     - ansible_distribution == 'Debian'
#     - not cloudflared_binary_installed.stat.exists

# - import_tasks: redhat.yml
#   when: 
#     - ansible_facts['os_family'] == "RedHat"
#     - not cloudflared_binary_installed.stat.exists

- name: check if pihole is already installed
  ansible.builtin.stat:
    path: "{{ pihole_binary_location }}"
  register: pihole_binary_installed

- ansible.builtin.set_fact:
    pihole_installed: "{{ pihole_binary_installed.stat.exists | default(false) }}"

############################################
# CONFIG
############################################

- name: set SELINUX to permissive
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/selinux
    regexp: "^SELINUX=enforcing"
    line: "SELINUX=permissive"
    state: present
  when: not pihole_installed

- name: "create {{ pihole_user }} system user and group (nologin shell)"
  ansible.builtin.user:
    name: "{{ pihole_user }}"
    shell: /usr/sbin/nologin
    create_home: false
    system: true
    state: present
  when: 
    - not pihole_installed

- name: create pihole configuration directory
  ansible.builtin.file:
    name: "{{ pihole_config_dir }}"
    state: directory
    owner: "{{ pihole_user }}"
    group: "{{ pihole_group }}"
    mode: "0755"

- name: prepare pihole configuration
  ansible.builtin.template:
    src: "setupVars.conf.j2"
    dest: "{{ pihole_config_dir }}/setupVars.conf"
    owner: root
    group: root
    mode: "0644"

- name: reboot
  ansible.builtin.reboot:
    reboot_timeout: 300
    test_command: whoami
  when: not pihole_installed

############################################
# INSTALL
############################################

- name: download pihole intaller
  ansible.builtin.get_url:
    url: https://install.pi-hole.net
    dest: "{{ pihole_installer }}"
  when: not pihole_installed

# rewrite pihole config even if pihole is already installed
# for changes to pihole-FTL.conf to take effect the pihole DNS resolver must be restarted
- name: move all pihole configuration into place
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ pihole_config_dir }}/{{ item.dest }}"
    owner: "{{ pihole_user }}"
    group: root
    mode: "0664"
  loop: 
    - { src: setupVars.conf.j2,  dest: setupVars.conf }
    - { src: pihole-FTL.conf.j2, dest: pihole-FTL.conf }
  notify: restart pihole-FTL

- name: install pihole
  ansible.builtin.shell: bash {{ pihole_installer }} --unattended
  register: pihole_output
  when: not pihole_installed

- name: pihole output
  ansible.builtin.debug: msg={{ pihole_output.stdout_lines }}
  when: not pihole_installed

# fix "setupVars.conf" file 

# - name: fix "setupVars.conf" file 
#   lineinfile:
#     path: "{{ pihole_varsconf_location }}"
#     regexp: "^REV_SERVER_DOMAIN={{ pihole_rev_server_domain }}PIHOLE_INTERFACE={{ pihole_interface }}"
#     line: "REV_SERVER_DOMAIN={{ pihole_rev_server_domain }}\nPIHOLE_INTERFACE={{ pihole_interface }}"
#     state: present

# - name: stop firewalld
#   service:
#     name: firewalld
#     state: stopped
#     enabled: yes
#   notify: restart pihole 

# - name: Comment out 127.0.0.1 hostname line in /etc/hosts
#   lineinfile:
#     path: /etc/hosts
#     regexp: "^127.0.0.1 {{ hostname }}{{ hostname_no_domain }}"
#     line: "# 127.0.0.1 {{ hostname }}{{ hostname_no_domain }}"
#     state: present

# - name: Add IP for pihole in /etc/hosts
#   lineinfile:
#     path: /etc/hosts
#     line: "{{ hosts_pihole_ip }} {{ hostname }}{{ hostname_no_domain }}"
#     state: present

# # Configure Local DNS - DNS Records
# - name: Get file stat to be able to perform a check in the Local DNS Records tasks
#   local_action: stat path={{ pihole_custom_conf_dir }}/custom.list
#   register: pihole_custom_list_file

# - name: Copy Local DNS Records custom.list (provided)
#   template:
#     src: "{{ pihole_custom_conf_dir }}/custom.list"
#     dest: "/etc/pihole/custom.list"
#     owner: root
#     group: root
#     mode: "0644"
#   when: pihole_custom_list_file.stat.exists

# - name: Copy Local DNS Records custom.list 
#   copy:
#     src: "custom.list"
#     dest: "/etc/pihole/custom.list"
#     owner: root
#     group: root
#     mode: "0644"
#   when: not pihole_custom_list_file.stat.exists

# # Configure Local DNS CNAMEs 
# - name: Get file stat to be able to perform a check in the Local DNS CNAMEs tasks
#   local_action: stat path={{ pihole_custom_conf_dir }}/05-pihole-custom-cname.conf
#   register: pihole_custom_cname_file

# - name: Copy Local DNS CNAMEs custom.list (provided)
#   template:
#     src: "{{ pihole_custom_conf_dir }}/05-pihole-custom-cname.conf"
#     dest: "/etc/dnsmasq.d/05-pihole-custom-cname.conf"
#     owner: root
#     group: root
#     mode: "0644"
#   when: pihole_custom_cname_file.stat.exists

# - name: Copy Local DNS CNAMEs custom.list 
#   copy:
#     src: "05-pihole-custom-cname.conf"
#     dest: "/etc/dnsmasq.d/05-pihole-custom-cname.conf"
#     owner: root
#     group: root
#     mode: "0644"
#   when: not pihole_custom_cname_file.stat.exists

# # Configure LDAP/AD forwarding
# - name: Get file stat to be able to perform a check in the Local DNS CNAMEs tasks
#   local_action: stat path={{ pihole_custom_conf_dir }}/06-localdns-AD.conf
#   register: pihole_localdns_ad_list_file

# - name: Copy Local DNS AD config (provided)
#   template:
#     src: "{{ pihole_custom_conf_dir }}/06-localdns-AD.conf"
#     dest: "/etc/dnsmasq.d/06-localdns-AD.conf"
#     owner: root
#     group: root
#     mode: "0644"
#   when: pihole_localdns_ad_list_file.stat.exists

# - name: Copy Local DNS AD config
#   copy:
#     src: "06-localdns-AD.conf"
#     dest: "/etc/dnsmasq.d/06-localdns-AD.conf"
#     owner: root
#     group: root
#     mode: "0644"
#   when: not pihole_localdns_ad_list_file.stat.exists
#   notify: restart pihole